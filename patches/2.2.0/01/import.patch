diff --git a/src/Repositories/SqlStatementRepository.php b/src/Repositories/SqlStatementRepository.php
index fbbc7a8..92af0c9 100644
--- a/src/Repositories/SqlStatementRepository.php
+++ b/src/Repositories/SqlStatementRepository.php
@@ -419,7 +419,9 @@ class SqlStatementRepository extends AbstractSqlStatementRepository
                     is_default = :is_default
               WHERE website_id = :website_id',
         SqlStatementKeys::IMAGE_TYPES =>
-            'SELECT main_table.attribute_code
+            'SELECT main_table.attribute_code,
+                    main_table.attribute_id,
+                    main_table.is_user_defined
                FROM eav_attribute AS main_table
          INNER JOIN eav_entity_type AS entity_type
                  ON main_table.entity_type_id = entity_type.entity_type_id
@@ -429,7 +431,11 @@ class SqlStatementRepository extends AbstractSqlStatementRepository
                  ON main_table.attribute_id = additional_table.attribute_id
               WHERE (entity_type_code = \'catalog_product\')
                 AND (frontend_input = \'media_image\')
-           GROUP BY main_table.attribute_code'
+           GROUP BY main_table.attribute_code,
+                    main_table.attribute_id,
+                    main_table.is_user_defined
+           ORDER BY main_table.is_user_defined,
+                    main_table.attribute_id'
     );
 
     /**
diff --git a/src/Subjects/FileUploadSubjectInterface.php b/src/Subjects/FileUploadSubjectInterface.php
index ff099bd..fbd25dd 100644
--- a/src/Subjects/FileUploadSubjectInterface.php
+++ b/src/Subjects/FileUploadSubjectInterface.php
@@ -32,6 +32,52 @@ namespace TechDivision\Import\Subjects;
 interface FileUploadSubjectInterface extends FilesystemSubjectInterface
 {
 
+    /**
+     * Adds the mapping from the filename => new filename.
+     *
+     * @param string $filename    The filename
+     * @param string $newFilename The new filename
+     *
+     * @return string The mapped filename
+     */
+    public function addImageMapping($filename, $newFilename);
+
+    /**
+     * Returns the mapped filename (which is the new filename).
+     *
+     * @param string $filename The filename to map
+     *
+     * @return string The mapped filename
+     */
+    public function getImageMapping($filename);
+
+    /**
+     * Returns TRUE, if the passed filename has already been mapped.
+     *
+     * @param string $filename The filename to query for
+     *
+     * @return boolean TRUE if the filename has already been mapped, else FALSE
+     */
+    public function imageHasBeenMapped($filename);
+
+    /**
+     * Returns TRUE, if the passed filename has NOT been mapped yet.
+     *
+     * @param string $filename The filename to query for
+     *
+     * @return boolean TRUE if the filename has NOT been mapped yet, else FALSE
+     */
+    public function imageHasNotBeenMapped($filename);
+
+    /**
+     * Returns the original filename for passed one (which is the new filename).
+     *
+     * @param string $newFilename The new filename to return the original one for
+     *
+     * @return string The original filename
+     */
+    public function getInversedImageMapping($newFilename);
+
     /**
      * Return's the flag to copy images or not.
      *
@@ -54,9 +100,9 @@ interface FileUploadSubjectInterface extends FilesystemSubjectInterface
     public function getImagesFileDir();
 
     /**
-     * Get new file name if the same is already exists.
+     * Get new file name, if a filename with the same name already exists.
      *
-     * @param string $targetFilename The name of the exisising files
+     * @param string $targetFilename The name of target file
      *
      * @return string The new filename
      */
diff --git a/src/Subjects/FileUploadTrait.php b/src/Subjects/FileUploadTrait.php
index 83cbfdf..03a6913 100644
--- a/src/Subjects/FileUploadTrait.php
+++ b/src/Subjects/FileUploadTrait.php
@@ -46,6 +46,13 @@ trait FileUploadTrait
      */
     protected $imagesFileDir;
 
+    /**
+     * Contains the mappings for the image names that has been uploaded (old => new image name).
+     *
+     * @var array
+     */
+    protected $imageMappings = array();
+
     /**
      * The flag whether to copy the images or not.
      *
@@ -120,9 +127,84 @@ trait FileUploadTrait
     }
 
     /**
-     * Get new file name if the same is already exists.
+     * Adds the mapping from the filename => new filename.
+     *
+     * @param string $filename    The filename
+     * @param string $newFilename The new filename
+     *
+     * @return void
+     */
+    public function addImageMapping($filename, $newFilename)
+    {
+        $this->imageMappings[$filename] = $newFilename;
+    }
+
+    /**
+     * Returns the mapped filename (which is the new filename).
+     *
+     * @param string $filename The filename to map
+     *
+     * @return string The mapped filename
+     */
+    public function getImageMapping($filename)
+    {
+
+        // query whether or not a mapping is available, if yes return the mapped name
+        if (isset($this->imageMappings[$filename])) {
+            return $this->imageMappings[$filename];
+        }
+
+        // return the passed filename otherwise
+        return $filename;
+    }
+
+    /**
+     * Returns TRUE, if the passed filename has already been mapped.
+     *
+     * @param string $filename The filename to query for
+     *
+     * @return boolean TRUE if the filename has already been mapped, else FALSE
+     */
+    public function imageHasBeenMapped($filename)
+    {
+        return isset($this->imageMappings[$filename]);
+    }
+
+    /**
+     * Returns TRUE, if the passed filename has NOT been mapped yet.
      *
-     * @param string $targetFilename The name of the exisising files
+     * @param string $filename The filename to query for
+     *
+     * @return boolean TRUE if the filename has NOT been mapped yet, else FALSE
+     */
+    public function imageHasNotBeenMapped($filename)
+    {
+        return !isset($this->imageMappings[$filename]);
+    }
+
+    /**
+     * Returns the original filename for passed one (which is the new filename).
+     *
+     * @param string $newFilename The new filename to return the original one for
+     *
+     * @return string The original filename
+     */
+    public function getInversedImageMapping($newFilename)
+    {
+
+        // try to load the original filename
+        if ($filename = array_search($newFilename, $this->imageMappings)) {
+            return $filename;
+        }
+
+        // return the new one otherwise
+        return $newFilename;
+    }
+
+    /**
+     * Get new file name, if a filename with the same name already exists.
+     *
+     * @param string $targetFilename The name of target file
      *
      * @return string The new filename
      */
@@ -134,7 +216,7 @@ trait FileUploadTrait
 
         // query whether or not, the file exists
         if ($this->getFilesystemAdapter()->isFile($targetFilename)) {
-            // initialize the incex and the basename
+            // initialize the index and the basename
             $index = 1;
             $baseName = $fileInfo['filename'] . '.' . $fileInfo['extension'];
 
@@ -179,23 +261,30 @@ trait FileUploadTrait
 
         // query whether or not the image file to be imported is available
         if (!$this->getFilesystemAdapter()->isFile($sourceFilename)) {
-            throw new \Exception(sprintf('Media file %s not available', $sourceFilename));
+            throw new \Exception(sprintf('Media file "%s" is not available', $sourceFilename));
         }
 
-        // prepare the target filename, if necessary
-        $newTargetFilename = $this->getNewFileName($targetFilename);
-        $targetFilename = str_replace(basename($targetFilename), $newTargetFilename, $targetFilename);
+        // query whether or not, the file has already been processed
+        if ($this->imageHasNotBeenMapped($filename)) {
+            // load the new filename, e. g. if a file with the same name already exists
+            $newTargetFilename =  $this->getNewFileName($targetFilename);
+            // replace the old filename with the new one
+            $targetFilename = str_replace(basename($targetFilename), $newTargetFilename, $targetFilename);
 
-        // make sure, the target directory exists
-        if (!$this->getFilesystemAdapter()->isDir($targetDirectory = dirname($targetFilename))) {
-            $this->getFilesystemAdapter()->mkdir($targetDirectory, 0755);
-        }
+            // make sure, the target directory exists
+            if (!$this->getFilesystemAdapter()->isDir($targetDirectory = dirname($targetFilename))) {
+                $this->getFilesystemAdapter()->mkdir($targetDirectory, 0755);
+            }
+
+            // copy the image to the target directory
+            $this->getFilesystemAdapter()->copy($sourceFilename, $targetFilename);
 
-        // copy the image to the target directory
-        $this->getFilesystemAdapter()->copy($sourceFilename, $targetFilename);
+            // add the mapping and return the mapped filename
+            $this->addImageMapping($filename, str_replace($mediaDir, '', $targetFilename));
+        }
 
-        // return the new target filename
-        return str_replace($mediaDir, '', $targetFilename);
+        // simply return the mapped filename
+        return $this->getImageMapping($filename);
     }
 
     /**
@@ -217,7 +306,7 @@ trait FileUploadTrait
 
         // query whether or not the image file to be deleted is available
         if (!$this->getFilesystemAdapter()->isFile($targetFilename)) {
-            throw new \Exception(sprintf('Media file %s not available', $targetFilename));
+            throw new \Exception(sprintf('Media file "%s" is not available', $targetFilename));
         }
 
         // delte the image from the target directory
