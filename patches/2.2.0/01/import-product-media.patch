diff --git a/src/Observers/MediaGalleryObserver.php b/src/Observers/MediaGalleryObserver.php
index b61a7c0..6d4c802 100644
--- a/src/Observers/MediaGalleryObserver.php
+++ b/src/Observers/MediaGalleryObserver.php
@@ -93,16 +93,18 @@ class MediaGalleryObserver extends AbstractProductImportObserver
     protected function process()
     {
 
-        // query whether or not, the image changed
-        if ($this->isParentImage($this->getValue(ColumnKeys::IMAGE_PATH))) {
-            return;
-        }
-
-        // try to load the product SKU and map it the entity ID
+        // try to load the product SKU and map it the entity ID and
         $this->parentId = $this->getValue(ColumnKeys::IMAGE_PARENT_SKU, null, array($this, 'mapParentSku'));
 
-        // reset the position counter for the product media gallery value
-        $this->resetPositionCounter();
+        // reset the position counter, if either a new PK or store view code has been found
+        if (!$this->isParentStoreViewCode($this->getValue(ColumnKeys::STORE_VIEW_CODE, $this->getDefaultStoreViewCode())) ||
+            !$this->isParentId($this->parentId)
+        ) {
+            $this->resetPositionCounter();
+        }
+
+        // prepare the actual store view code
+        $this->prepareStoreViewCode($this->getRow());
 
         // initialize and persist the product media gallery
         $productMediaGallery = $this->initializeProductMediaGallery($this->prepareProductMediaGalleryAttributes());
@@ -199,28 +201,6 @@ class MediaGalleryObserver extends AbstractProductImportObserver
         return $this->mapSkuToEntityId($parentSku);
     }
 
-    /**
-     * Return's the name of the created image.
-     *
-     * @return string The name of the created image
-     */
-    protected function getParentImage()
-    {
-        return $this->getSubject()->getParentImage();
-    }
-
-    /**
-     * Return's TRUE if the passed image is the parent one.
-     *
-     * @param string $image The imageD to check
-     *
-     * @return boolean TRUE if the passed image is the parent one
-     */
-    protected function isParentImage($image)
-    {
-        return $this->getParentImage() === $image;
-    }
-
     /**
      * Set's the value ID of the created media gallery entry.
      *
@@ -258,6 +238,50 @@ class MediaGalleryObserver extends AbstractProductImportObserver
         $this->getSubject()->setParentId($parentId);
     }
 
+    /**
+     * Return's the ID of the parent product to relate the variant with.
+     *
+     * @return integer The ID of the parent product
+     */
+    protected function getParentId()
+    {
+        return $this->getSubject()->getParentId();
+    }
+
+    /**
+     * Query whether or not this is the parent ID.
+     *
+     * @param integer $parentId The PK of the parent image
+     *
+     * @return boolean TRUE if the PK euqals, else FALSE
+     */
+    protected function isParentId($parentId)
+    {
+        return $this->getParentId() === $parentId;
+    }
+
+    /**
+     * Query whether or not this is the parent store view code.
+     *
+     * @param string $storeViewCode The actual store view code
+     *
+     * @return boolean TRUE if the store view code equals, else FALSE
+     */
+    protected function isParentStoreViewCode($storeViewCode)
+    {
+        return $this->getStoreViewCode() === $storeViewCode;
+    }
+
+    /**
+     * Return's the default store view code.
+     *
+     * @return array The default store view code
+     */
+    protected function getDefaultStoreViewCode()
+    {
+        return $this->getSubject()->getDefaultStoreViewCode();
+    }
+
     /**
      * Reset the position counter to 1.
      *
diff --git a/src/Observers/MediaGalleryValueObserver.php b/src/Observers/MediaGalleryValueObserver.php
index 451f6c4..67ea73c 100644
--- a/src/Observers/MediaGalleryValueObserver.php
+++ b/src/Observers/MediaGalleryValueObserver.php
@@ -73,17 +73,9 @@ class MediaGalleryValueObserver extends AbstractProductImportObserver
     protected function process()
     {
 
-        // query whether or not, the image changed
-        if ($this->isParentImage($imagePath = $this->getValue(ColumnKeys::IMAGE_PATH))) {
-            return;
-        }
-
         // initialize and persist the product media gallery value
         $productMediaGalleryValue = $this->initializeProductMediaGalleryValue($this->prepareAttributes());
         $this->persistProductMediaGalleryValue($productMediaGalleryValue);
-
-        // temporarily persist the image name
-        $this->setParentImage($imagePath);
     }
 
     /**
@@ -111,6 +103,9 @@ class MediaGalleryValueObserver extends AbstractProductImportObserver
         // load the image label
         $imageLabel = $this->getValue(ColumnKeys::IMAGE_LABEL);
 
+        // load the flag that decides whether or not an image should be hidden on product page
+        $hideFromProductPage = $this->getValue(ColumnKeys::HIDE_FROM_PRODUCT_PAGE);
+
         // prepare the media gallery value
         return $this->initializeEntity(
             array(
@@ -119,7 +114,7 @@ class MediaGalleryValueObserver extends AbstractProductImportObserver
                 MemberNames::ENTITY_ID   => $parentId,
                 MemberNames::LABEL       => $imageLabel,
                 MemberNames::POSITION    => $position,
-                MemberNames::DISABLED    => 0
+                MemberNames::DISABLED    => $hideFromProductPage
             )
         );
     }
@@ -175,40 +170,6 @@ class MediaGalleryValueObserver extends AbstractProductImportObserver
         return $this->getSubject()->mapSkuToEntityId($sku);
     }
 
-    /**
-     * Set's the name of the created image.
-     *
-     * @param string $parentImage The name of the created image
-     *
-     * @return void
-     */
-    protected function setParentImage($parentImage)
-    {
-        $this->getSubject()->setParentImage($parentImage);
-    }
-
-    /**
-     * Return's the name of the created image.
-     *
-     * @return string The name of the created image
-     */
-    protected function getParentImage()
-    {
-        return $this->getSubject()->getParentImage();
-    }
-
-    /**
-     * Return's TRUE if the passed image is the parent one.
-     *
-     * @param string $image The imageD to check
-     *
-     * @return boolean TRUE if the passed image is the parent one
-     */
-    protected function isParentImage($image)
-    {
-        return $this->getParentImage() === $image;
-    }
-
     /**
      * Return's the value ID of the created media gallery entry.
      *
diff --git a/src/Observers/ProductMediaObserver.php b/src/Observers/ProductMediaObserver.php
index 2cf54f9..204e91f 100755
--- a/src/Observers/ProductMediaObserver.php
+++ b/src/Observers/ProductMediaObserver.php
@@ -43,12 +43,19 @@ class ProductMediaObserver extends AbstractProductImportObserver
     const ARTEFACT_TYPE = 'media';
 
     /**
-     * The default image label.
+     * The the default image label.
      *
      * @var string
      */
     const DEFAULT_IMAGE_LABEL = 'Image';
 
+    /**
+     * The array with the image information of on row before they'll be converted into artefacts.
+     *
+     * @var array
+     */
+    protected $images = array();
+
     /**
      * The image artefacts that has to be exported.
      *
@@ -56,6 +63,20 @@ class ProductMediaObserver extends AbstractProductImportObserver
      */
     protected $artefacts = array();
 
+    /**
+     * The array with names of the images that should be hidden on the product detail page.
+     *
+     * @var array
+     */
+    protected $imagesToHide = array();
+
+    /**
+     * Holds the image values of the main row.
+     *
+     * @var array
+     */
+    protected $mainRow = array();
+
     /**
      * Process the observer's business logic.
      *
@@ -64,8 +85,18 @@ class ProductMediaObserver extends AbstractProductImportObserver
     protected function process()
     {
 
-        // initialize the array for the artefacts
+        // reset the values of the parent row, if the SKU changes
+        if ($this->isLastSku($this->getValue(ColumnKeys::SKU)) === false) {
+            $this->mainRow = array();
+        }
+
+        // initialize the array for the artefacts and the hidden images
+        $this->images = array();
         $this->artefacts = array();
+        $this->imagesToHide = array();
+
+        // load the images that has to be hidden on product detail page
+        $this->loadImagesToHide();
 
         // process the images/additional images
         $this->processImages();
@@ -75,6 +106,32 @@ class ProductMediaObserver extends AbstractProductImportObserver
         $this->addArtefacts($this->artefacts);
     }
 
+    /**
+     * Resolve's the value with the passed colum name from the actual row. If a callback will
+     * be passed, the callback will be invoked with the found value as parameter. If
+     * the value is NULL or empty, the default value will be returned.
+     *
+     * @param string        $name     The name of the column to return the value for
+     * @param mixed|null    $default  The default value, that has to be returned, if the row's value is empty
+     * @param callable|null $callback The callback that has to be invoked on the value, e. g. to format it
+     *
+     * @return mixed|null The, almost formatted, value
+     * @see \TechDivision\Import\Observers\AbstractObserver::getValue()
+     */
+    protected function getImageValue($name, $default = null, callable $callback = null)
+    {
+
+        // query whether or not the a image value is available, return it if yes
+        if ($this->hasValue($name) && $this->isLastSku($this->getValue(ColumnKeys::SKU)) === false) {
+            return $this->mainRow[$name] = $this->getValue($name, $default, $callback);
+        }
+
+        // try to load it from the parent rows
+        if (isset($this->mainRow[$name])) {
+            return $this->mainRow[$name];
+        }
+    }
+
     /**
      * Parses the column and exports the image data to a separate file.
      *
@@ -90,10 +147,18 @@ class ProductMediaObserver extends AbstractProductImportObserver
         // load the parent SKU from the row
         $parentSku = $this->getValue(ColumnKeys::SKU);
 
+        // load the image types
+        $imageTypes = $this->getImageTypes();
+
         // iterate over the available image fields
-        foreach ($this->getImageTypes() as $imageColumnName => $labelColumnName) {
-            // query whether or not, we've a base image
-            if ($image = $this->getValue($imageColumnName)) {
+        foreach ($imageTypes as $imageColumnName => $labelColumnName) {
+            // query whether or not the column contains an image name
+            if ($image = $this->getImageValue($imageColumnName)) {
+                // load the original image path and query whether or not an image with the name already exists
+                if (isset($this->artefacts[$imagePath = $this->getInversedImageMapping($image)])) {
+                    continue;
+                }
+
                 // initialize the label text
                 $labelText = $this->getDefaultImageLabel();
 
@@ -105,25 +170,27 @@ class ProductMediaObserver extends AbstractProductImportObserver
                 // prepare the new base image
                 $artefact = $this->newArtefact(
                     array(
-                        ColumnKeys::STORE_VIEW_CODE    => $storeViewCode,
-                        ColumnKeys::ATTRIBUTE_SET_CODE => $attributeSetCode,
-                        ColumnKeys::IMAGE_PARENT_SKU   => $parentSku,
-                        ColumnKeys::IMAGE_PATH         => $image,
-                        ColumnKeys::IMAGE_PATH_NEW     => $image,
-                        ColumnKeys::IMAGE_LABEL        => $labelText
+                        ColumnKeys::STORE_VIEW_CODE        => $storeViewCode,
+                        ColumnKeys::ATTRIBUTE_SET_CODE     => $attributeSetCode,
+                        ColumnKeys::IMAGE_PARENT_SKU       => $parentSku,
+                        ColumnKeys::IMAGE_PATH             => $imagePath,
+                        ColumnKeys::IMAGE_PATH_NEW         => $image,
+                        ColumnKeys::HIDE_FROM_PRODUCT_PAGE => in_array($image, $this->imagesToHide) ? 1 : 0,
+                        ColumnKeys::IMAGE_LABEL            => $labelText
                     ),
                     array(
-                        ColumnKeys::STORE_VIEW_CODE    => ColumnKeys::STORE_VIEW_CODE,
-                        ColumnKeys::ATTRIBUTE_SET_CODE => ColumnKeys::ATTRIBUTE_SET_CODE,
-                        ColumnKeys::IMAGE_PARENT_SKU   => ColumnKeys::SKU,
-                        ColumnKeys::IMAGE_PATH         => $imageColumnName,
-                        ColumnKeys::IMAGE_PATH_NEW     => $imageColumnName,
-                        ColumnKeys::IMAGE_LABEL        => $labelColumnName
+                        ColumnKeys::STORE_VIEW_CODE        => ColumnKeys::STORE_VIEW_CODE,
+                        ColumnKeys::ATTRIBUTE_SET_CODE     => ColumnKeys::ATTRIBUTE_SET_CODE,
+                        ColumnKeys::IMAGE_PARENT_SKU       => ColumnKeys::SKU,
+                        ColumnKeys::IMAGE_PATH             => $imageColumnName,
+                        ColumnKeys::IMAGE_PATH_NEW         => $imageColumnName,
+                        ColumnKeys::HIDE_FROM_PRODUCT_PAGE => ColumnKeys::HIDE_FROM_PRODUCT_PAGE,
+                        ColumnKeys::IMAGE_LABEL            => $labelColumnName
                     )
                 );
 
                 // append the base image to the artefacts
-                $this->artefacts[] = $artefact;
+                $this->artefacts[$imagePath] = $artefact;
             }
         }
     }
@@ -144,40 +211,64 @@ class ProductMediaObserver extends AbstractProductImportObserver
         $parentSku = $this->getValue(ColumnKeys::SKU);
 
         // query whether or not, we've additional images
-        if ($additionalImages = $this->getValue(ColumnKeys::ADDITIONAL_IMAGES, null, array($this, 'explode'))) {
+        if ($additionalImages = $this->getImageValue(ColumnKeys::ADDITIONAL_IMAGES, null, array($this, 'explode'))) {
             // expand the additional image labels, if available
             $additionalImageLabels = $this->getValue(ColumnKeys::ADDITIONAL_IMAGE_LABELS, array(), array($this, 'explode'));
 
             // initialize the images with the found values
             foreach ($additionalImages as $key => $additionalImage) {
+                // load the original image path and query whether or not an image with the name already exists
+                if (isset($this->artefacts[$imagePath = $this->getInversedImageMapping($additionalImage)])) {
+                    continue;
+                }
+
                 // prepare the additional image
                 $artefact = $this->newArtefact(
                     array(
-                        ColumnKeys::STORE_VIEW_CODE    => $storeViewCode,
-                        ColumnKeys::ATTRIBUTE_SET_CODE => $attributeSetCode,
-                        ColumnKeys::IMAGE_PARENT_SKU   => $parentSku,
-                        ColumnKeys::IMAGE_PATH         => $additionalImage,
-                        ColumnKeys::IMAGE_PATH_NEW     => $additionalImage,
-                        ColumnKeys::IMAGE_LABEL        => isset($additionalImageLabels[$key]) ?
-                                                          $additionalImageLabels[$key] :
-                                                          $this->getDefaultImageLabel()
+                        ColumnKeys::STORE_VIEW_CODE        => $storeViewCode,
+                        ColumnKeys::ATTRIBUTE_SET_CODE     => $attributeSetCode,
+                        ColumnKeys::IMAGE_PARENT_SKU       => $parentSku,
+                        ColumnKeys::IMAGE_PATH             => $imagePath,
+                        ColumnKeys::IMAGE_PATH_NEW         => $additionalImage,
+                        ColumnKeys::HIDE_FROM_PRODUCT_PAGE => in_array($additionalImage, $this->imagesToHide) ? 1 : 0,
+                        ColumnKeys::IMAGE_LABEL            => isset($additionalImageLabels[$key]) ?
+                                                              $additionalImageLabels[$key] :
+                                                              $this->getDefaultImageLabel()
                     ),
                     array(
-                        ColumnKeys::STORE_VIEW_CODE    => ColumnKeys::STORE_VIEW_CODE,
-                        ColumnKeys::ATTRIBUTE_SET_CODE => ColumnKeys::ATTRIBUTE_SET_CODE,
-                        ColumnKeys::IMAGE_PARENT_SKU   => ColumnKeys::SKU,
-                        ColumnKeys::IMAGE_PATH         => ColumnKeys::ADDITIONAL_IMAGES,
-                        ColumnKeys::IMAGE_PATH_NEW     => ColumnKeys::ADDITIONAL_IMAGES,
-                        ColumnKeys::IMAGE_LABEL        => ColumnKeys::ADDITIONAL_IMAGE_LABELS
+                        ColumnKeys::STORE_VIEW_CODE        => ColumnKeys::STORE_VIEW_CODE,
+                        ColumnKeys::ATTRIBUTE_SET_CODE     => ColumnKeys::ATTRIBUTE_SET_CODE,
+                        ColumnKeys::IMAGE_PARENT_SKU       => ColumnKeys::SKU,
+                        ColumnKeys::IMAGE_PATH             => ColumnKeys::ADDITIONAL_IMAGES,
+                        ColumnKeys::IMAGE_PATH_NEW         => ColumnKeys::ADDITIONAL_IMAGES,
+                        ColumnKeys::HIDE_FROM_PRODUCT_PAGE => ColumnKeys::HIDE_FROM_PRODUCT_PAGE,
+                        ColumnKeys::IMAGE_LABEL            => ColumnKeys::ADDITIONAL_IMAGE_LABELS
                     )
                 );
 
                 // append the additional image to the artefacts
-                $this->artefacts[] = $artefact;
+                $this->artefacts[$imagePath] = $artefact;
             }
         }
     }
 
+    /**
+     * Load the images that has to be hidden on the product detail page.
+     *
+     * @return void
+     */
+    protected function loadImagesToHide()
+    {
+
+        // load the array with the images that has to be hidden
+        $hideFromProductPage = $this->getValue(ColumnKeys::HIDE_FROM_PRODUCT_PAGE, array(), array($this, 'explode'));
+
+        // map the image names, because probably they have been renamed by the upload functionlity
+        foreach ($hideFromProductPage as $filename) {
+            $this->imagesToHide[] = $this->getImageMapping($filename);
+        }
+    }
+
     /**
      * Return's the array with the available image types and their label columns.
      *
@@ -191,13 +282,37 @@ class ProductMediaObserver extends AbstractProductImportObserver
     /**
      * Return's the default image label.
      *
-     * @return string The default image label
+     * @return string|null The default image label
      */
     protected function getDefaultImageLabel()
     {
         return ProductMediaObserver::DEFAULT_IMAGE_LABEL;
     }
 
+    /**
+     * Returns the mapped filename (which is the new filename).
+     *
+     * @param string $filename The filename to map
+     *
+     * @return string The mapped filename
+     */
+    protected function getImageMapping($filename)
+    {
+        return $this->getSubject()->getImageMapping($filename);
+    }
+
+    /**
+     * Returns the original filename for passed one (which is the new filename).
+     *
+     * @param string $newFilename The new filename to return the original one for
+     *
+     * @return string The original filename
+     */
+    protected function getInversedImageMapping($newFilename)
+    {
+        return $this->getSubject()->getInversedImageMapping($newFilename);
+    }
+
     /**
      * Create's and return's a new empty artefact entity.
      *
@@ -222,6 +337,6 @@ class ProductMediaObserver extends AbstractProductImportObserver
      */
     protected function addArtefacts(array $artefacts)
     {
-        $this->getSubject()->addArtefacts(ProductMediaObserver::ARTEFACT_TYPE, $artefacts);
+        $this->getSubject()->addArtefacts(ProductMediaObserver::ARTEFACT_TYPE, $artefacts, false);
     }
 }
diff --git a/src/Subjects/MediaSubject.php b/src/Subjects/MediaSubject.php
index 5ebee34..e02d009 100644
--- a/src/Subjects/MediaSubject.php
+++ b/src/Subjects/MediaSubject.php
@@ -46,13 +46,6 @@ class MediaSubject extends AbstractProductSubject implements FileUploadSubjectIn
      */
     use FileUploadTrait;
 
-    /**
-     * The name of the craeted image.
-     *
-     * @var integer
-     */
-    protected $parentImage;
-
     /**
      * The ID of the parent product to relate the variant with.
      *
@@ -136,28 +129,6 @@ class MediaSubject extends AbstractProductSubject implements FileUploadSubjectIn
         }
     }
 
-    /**
-     * Set's the name of the created image.
-     *
-     * @param string $parentImage The name of the created image
-     *
-     * @return void
-     */
-    public function setParentImage($parentImage)
-    {
-        $this->parentImage = $parentImage;
-    }
-
-    /**
-     * Return's the name of the created image.
-     *
-     * @return string The name of the created image
-     */
-    public function getParentImage()
-    {
-        return $this->parentImage;
-    }
-
     /**
      * Set's the ID of the parent product to relate the variant with.
      *
@@ -209,7 +180,7 @@ class MediaSubject extends AbstractProductSubject implements FileUploadSubjectIn
      */
     public function resetPositionCounter()
     {
-        $this->positionCounter = 1;
+        $this->positionCounter = 0;
     }
 
     /**
diff --git a/src/Utils/ColumnKeys.php b/src/Utils/ColumnKeys.php
index 32553e9..7af4245 100644
--- a/src/Utils/ColumnKeys.php
+++ b/src/Utils/ColumnKeys.php
@@ -108,4 +108,11 @@ class ColumnKeys extends \TechDivision\Import\Product\Utils\ColumnKeys
      * @var string
      */
     const ADDITIONAL_IMAGE_LABELS = 'additional_image_labels';
+
+    /**
+     * Name for the column 'hide_from_product_page'.
+     *
+     * @var string
+     */
+    const HIDE_FROM_PRODUCT_PAGE = 'hide_from_product_page';
 }
